{0 ONijn - Coq Proof Script Generation}
ONijn is an OCaml module of
{{: https://github.com/nmvdw/Nijn} Nijn}.
It is intended to be used as a tool to generate Coq termination certification
scripts from the output of termination tools.

{1 Quickstart}

{1 Public API}

The public API consists of three modules:
{!module: Syntax}, {!module: Coq}, and {!module: Parser}.

- {!module: Syntax} Provides submodules for syntactic constructions.
It contains representations for Types, Terms, Polynomials, and rewriting rules.

- {!module: Coq} Provides interfacing to generate strings that are valid coq
constructions.
For more details,
check the {!module: Coq.Grammar} and {!module: Coq.Proof_script} modules.

- {!module: Parser} Provides abstract interfacing for creating parsers of file
formats accepted by {b ONijn}.

{1 Input File Format}

In order to certify terminaion of a rewriting system,
one must first represent the certificate
(stating the termination property) in a way that {b onijn} understands it.

The rewriting formalism of accepted by {b onijn} is AFS
(Algebraic Functional Systems).

{2 Grammar for Signature and Rules}

{[
answer := YES | NO | MAYBE
sort, fn, var := ['a'-'z' 'A'-'Z'] ['a'-'z' 'A'-'Z' '0'-'9']*

type := sort | type -> type
type_dec := [] --> type | [type * ... * type] --> type

term := var | fn | term term | fn(term, ..., term) | /\var.term

rewrite_rule := term => term

]}

Where [answer] represents the termination status given by a termination tool.
In the construct for [sort], [fn], and [var],
the regex expression [['a'-'z' 'A'-'Z'] ['a'-'z' 'A'-'Z' '0'-'9']*] stating
the string format accepted as names for sorts, function symbols, and variables,
respectively.

In algebraic functional systems, type declarations and types are not the same.
The [type] construct defines the usual simple types,
meanwhile the [type_dec] construct defines type declarations.
Type declarations are used to anotate function symbols in the input signature.
Intuitively,
a type declaration is a list of input types separated by [*],
i.e., a list [[<type_1> * ... * <type_n>]],
and an output type.

For instance, to represent that a symbol [zero] is of type [nat],
we write: [zero : [] --> nat].
Notice that the input type list is empty,
which is in line with the intended interpretation of [zero : nat],
as [zero] would be a symbol that does not receive any arguments.
Take for instance [map : (a -> a) -> list -> list],
which is the type of a monomorphic [map] function over elements of type [a].
It's type declaration can be written as [map : [(a -> a) * list] --> list].

We can already represent signature and rewriting systems.
Let us take the [map] TRS as exemple.

{[
map(F, nil) => nil
map(F, hd :: tl) => F(hd) :: map(F, tl)
]}

In {b onijn} format this system is represented as:
{[
Signature: [
  cons : [a * list] --> list;
  map : [list * a -> a] --> list;
  nil : [] --> list
]

Rules: [
  map(nil, f) => nil ;
  map(cons(x, y), f) => cons(f x, map(y, f))
]
]}

{2 Grammar for Polynomial Interpretations}

We represent polynomials with the grammar below:
{[
var := ['a'-'z' 'A'-'Z'] ['a'-'z' 'A'-'Z' '0'-'9']*
poly := n | var | var(poly) | poly + poly | poly * poly
poly_fun := Lam[var_1; ...; var_n] . poly
poly_int := J(fn) = poly_fun
]}

Continuing with the map example, we represet an interpretation for it in {b onijn}
as follows:

{[
Interpretation: [
  J(cons) = Lam[y0;y1].3 + 2*y1;
  J(map) = Lam[y0;G1].3*y0 + 3*y0*G1(y0);
  J(nil) = 3
]
]}

{2 Removed Rules}
An {b onijn} file must end with a list of rules that can be oriented with the
given interpretation.

{[
Removed: [
  map(nil, F) => nil ;
  map(cons(X, Y), F) => cons(F X, map(Y, F))
]
]}

{2 A Complete File Example}
Putting everything together we get a file [map_trs.onijn] as follows:
{[
(** This is a comment. It will be ignored by onijn. **)
YES

Signature: [
  cons : [a * list] --> list      ;
  map  : [list * a -> a] --> list ;
  nil  : [] --> list
]

Rules: [
  map(nil, f)        => nil ;
  map(cons(x, y), f) => cons(f x, map(y, f))
]

Interpretation: [
  J(cons) = Lam[y0;y1].3 + 2*y1;
  J(map)  = Lam[y0;G1].3*y0 + 3*y0*G1(y0);
  J(nil)  = 3
]

Removed: [
  map(nil, F) => nil ;
  map(cons(X, Y), F) => cons(F X, map(Y, F))
]
]}
