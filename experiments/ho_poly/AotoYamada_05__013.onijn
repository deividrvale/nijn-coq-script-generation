YES
Signature: [ 
  append : c -> c -> c ;
  cons : b -> c -> c ;
  flatwith : (a -> b) -> b -> c ;
  flatwithsub : (a -> b) -> c -> c ;
  leaf : a -> b ;
  nil : c ;
  node : c -> b
]

Rules: [
  append nil X => X ;
  append (cons Y Z) U => cons Y (append Z U) ;
  flatwith F (leaf V) => cons (F V) nil ;
  flatwith G (node W) => flatwithsub G W ;
  flatwithsub H nil => nil ;
  flatwithsub I (cons Q R) => append (flatwith I Q) (flatwithsub I R)
]

Interpretation: [
  J(append) = Lam[y0;y1].y0 ;
  J(cons) = Lam[y0;y1].2 + 2*y0 ;
  J(flatwith) = Lam[G0;y1].1 + 3*y1*G0(y1) ;
  J(flatwithsub) = Lam[G0;y1].3 + 3*y1 + 2*G0(y1) + 3*y1*G0(y1) ;
  J(leaf) = Lam[y0].3 + 3*y0 ;
  J(nil) = 1 ;
  J(node) = Lam[y0].3 + 3*y0 
]

Removed: [
  append nil X => X ;
  append (cons Y Z) U => cons Y (append Z U) ;
  flatwith F (leaf V) => cons (F V) nil ;
  flatwith G (node W) => flatwithsub G W ;
  flatwithsub H nil => nil ;
  flatwithsub I (cons Q R) => append (flatwith I Q) (flatwithsub I R)
]

